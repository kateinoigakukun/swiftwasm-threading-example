import WasmParser
import Foundation

guard CommandLine.arguments.count == 3 else {
    print("Usage: \(CommandLine.arguments[0]) <input.wasm> <output.json>")
    exit(1)
}

let inputFile = CommandLine.arguments[1]
let outputFile = CommandLine.arguments[2]
let stream = try FileHandleStream(
    fileHandle: .open(inputFile, .readOnly)
)
var features = WasmFeatureSet.default
features.insert(.threads)
var parser = WasmParser.Parser(stream: stream, features: features)

var envMemoryDescriptor: WasmParser.Limits?
parsing: while let payload = try parser.parseNext() {
    switch payload {
    case .importSection(let importSection):
        for importEntry in importSection {
            guard case let .memory(limits) = importEntry.descriptor,
                importEntry.module == "env", importEntry.name == "memory" else {
                continue
            }
            envMemoryDescriptor = limits
            break parsing
        }
    default: break
    }
}

guard let memoryDescriptor = envMemoryDescriptor else {
    fatalError("env.memory is not found")
}

struct WasmMetadata: Encodable {
    let __comment: String = "This file is generated by \(#fileID)"
    let memoryInitial: UInt64
    let memoryMaximum: UInt64?
}
let metadata = WasmMetadata(
    memoryInitial: UInt64(memoryDescriptor.min),
    memoryMaximum: memoryDescriptor.max.map { UInt64($0) }
)

let encoder = JSONEncoder()
encoder.outputFormatting = [.prettyPrinted, .sortedKeys]
let data = try encoder.encode(metadata)
try data.write(to: URL(fileURLWithPath: outputFile))
